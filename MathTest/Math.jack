// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i, val;
        let i = 1;
        let val = 1;

        // Initialize static variable n
        let n = 16;

        // Initialize and fill powersOfTwo array
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = val;   // Handle 2^0 separate
        // 2^1 ... 2^n-1
        while (i < n) {
            let val = val * 2;
            let powersOfTwo[i] = val;
            let i = i + 1;
        }
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, i, shiftedX;


        if (x = 1) {
            return y;
        }
        if (y = 1) {
            return x;
        }
        if ((x = 0) | (y = 0)) {
            return 0;
        }
        if (x = 2) {
            return y + y;
        }
        if (y = 2) {
            return x + x;
        }

        let sum = 0;
        let i = 0;
        let shiftedX = x;
        

        while (i < n) {
            if (Math.bit(y, i + 1)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;  // Equivalent to left shift
            let i = i + 1;
        }
        return sum;
        
    }

    /** Helper function returns true if the i-th bit of x is 1, otherwise false */
    function boolean bit(int x, int i) {
        var int bit, twoToBit;
        let bit = powersOfTwo[i - 1];
        return ~((x & bit) = 0);    
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var boolean isNeg;
        var int quotient;
        let isNeg = false;

        // Get |x| and |y| to use in calculation
        if (x < 0) {
            let isNeg = ~isNeg;
            let x = -x;
        }
        if (y < 0) {
            let isNeg = ~isNeg;
            let y = -y;
        } 

        let quotient = Math.divideHelper(x, y);

        // Set the quotients sign
        if (isNeg = true) {
            return -quotient;
        } else {
            return quotient;
        }
    }

    /** Recursive helper function for divide */
    function int divideHelper(int x, int y) {
        var int twoQ, q;
        // y < 0 checks for overflow, negative means overflow with 2s compliment
        if ((y > x) | (y < 0)) {
            return 0;
        }
        let q = Math.divideHelper(x, y + y);
        let twoQ = q + q;
        if ((x - (twoQ * y)) < y) {
            return twoQ;
        }
        return twoQ + 1;
    }
    
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, yPlusTwoToJ, squared;
        let y = 0;
        let j = n/2 - 1;


        while ((j > 0) | (j = 0)) {
            let yPlusTwoToJ = y + powersOfTwo[j];
            let squared = yPlusTwoToJ * yPlusTwoToJ;
            // Check > 0 for overflow
            if (((squared < x) | (squared = x)) & (squared > 0)) {
                let y = y + powersOfTwo[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
             return -x;
        } else {
            return x;
        }
    }
}
