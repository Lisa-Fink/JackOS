// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;

        let heap = 2048;
        let freeList = heap;
        
        let heap[0] = 0;        // 0 index in freeList item is next
        let heap[1] = 14334;     // 1 index in freeList item is size 
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var int next, segmentSize, prev, block;
        let prev = 0;
        let next = freeList;
        
        // search for first fit
        while (next > 0) {
            let segmentSize = next[1];

            // if size is exact take entire segment
            if (segmentSize = (size + 2)) {
                // Remove it from list
                // head of list
                if (prev = 0) {
                    let freeList = next;
                } else {
                    let prev[0] = next;
                }
                return next + 2;
            }

            // segment is big, take out fragment
            if (segmentSize > (size + 2)) {
                // decrease size of top part of block
                let next[1] = segmentSize - size - 2;
                // take bottom part of block as new segment
                let block = next + next[1] + 2;
                let block[0] = 0;
                let block[1] = size;
                return block + 2;
            }
            let prev = next;
            let next = next[0];
        }
        // if you reached this point, there were no fragments available
        // can implement defrag helper
        return 0;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int block;
        let block = o - 2;
        let block[0] = freeList;
        let freeList = block;
        return;
    }    
}
