// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int baseAddr;
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    /** Initializes the Screen. */
    function void init() {
        var int val, i;

        let color = true;
        let baseAddr = 16384;

        let val = 1;
        let i = 1;
        // Initialize and fill powersOfTwo array
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = val;   // Handle 2^0 separate
        // 2^1 ... 2^n-1
        while (i < 16) {
            let val = val + val;
            let powersOfTwo[i] = val;
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int addr, end;
        let addr = baseAddr;
        let end = 24576;
        while(addr < end) {
            do Memory.poke(addr, 0);
            let addr = addr + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit, quotient, product;
        let address= (32 * y) + (x / 16);
        let value = Memory.peek(baseAddr + address);

        // bit is x % 16 but % doesn't exist in Jack
        let quotient = x / 16;
        let product = quotient * 16;
        let bit = powersOfTwo[x - product];
        if (color = true) {
            let value = value | bit;
        } else {
            let bit = ~bit;
            let value = value & bit;
        }
        do Memory.poke(baseAddr + address, value);
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int address, value, bit, bitIdx, quotient, product, start, end, temp;
        // horizontal straight line - going east
        // Can handle going west instead of east by just swapping
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        let address = (32 * y) + (x1 / 16);
        let value = Memory.peek(baseAddr + address);


        // get the bit that line starts on
        // bit is x % 16 but % doesn't exist in Jack
        let quotient = x1 / 16;
        let product = quotient * 16;
        let bitIdx = x1 - product;
        let bit = powersOfTwo[bitIdx];

        let start = x1;
        let end = x2 + 1;

        // fill in bits remaining on first word in ram if not complete line
        if (bitIdx > 0) {
            // rightmost bit is leftmost dot on screen (x=0 corresponds to right-most bit of word)
            while ((start < end) & (bitIdx < 16)) {
                if (color = true) {
                let value = value | bit;
                } else {
                    let bit = ~bit;
                    let value = value & bit;
                }
                let bitIdx = bitIdx + 1;
                let bit = powersOfTwo[bitIdx];
                let start = start + 1;
            }
            do Memory.poke(baseAddr + address, value);
            let address = address + 1;
        }

        // try to fill as many 16 bit words at once as possible
        while ((start + 15) < end) {
            if (color = true) {
                do Memory.poke(baseAddr + address, -1);
            } else {
                do Memory.poke(baseAddr + address, 0);
            }
            let start = start + 16;
            let address = address + 1;
        }

        if (start < end) {
            // fill in bits remaining on last word in ram if not complete line at end
            let bitIdx = 0;
            let value = Memory.peek(baseAddr + address);
            while ((start < end) & (bitIdx < 16)) {
                let bit = powersOfTwo[bitIdx];
                if (color = true) {
                let value = value | bit;
                } else {
                    let bit = ~bit;
                    let value = value & bit;
                }
                let bitIdx = bitIdx + 1;
                let start = start + 1;
            }
            do Memory.poke(baseAddr + address, value);
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int address, value, bit, bitIdx, quotient, product, start, end, temp;
        // Vertical line going south
        // Can handle north by just swapping
        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let address = (32 * y1) + (x / 16);
        
        // bit is x % 16 but % doesn't exist in Jack
        let quotient = x / 16;
        let product = quotient * 16;
        let bitIdx = x - product;
        let bit = powersOfTwo[bitIdx];

        let start = y1;
        let end = y2 + 1;

        // 32 16 bit words across the screen, so add 32 to the address
        while (start < end) {
            let value = Memory.peek(baseAddr + address);
            if (color = true) {
                let value = value | bit;
            } else {
                let bit = ~bit;
                let value = value & bit;
            }
            do Memory.poke(baseAddr + address, value);
            let address = address + 32;
            let start = start + 1;
        }
        return;
    }
    

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, aStep, bStep, temp, aCond;
        
        // horizontal line
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        // vertical line
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }


        // angled line
        let a = 0;
        let b = 0;

        // always go north, can swap start end if it is going south
        if (y2 > y1) {
            // going south
            let temp = y1;
            let y1 = y2;
            let y2 = temp;

            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        // get directions for x/a
        if (x1 < x2) {
            let aStep = 1;
            
        } else {
            let aStep = -1;
        }
        let aCond = true;
        let bStep = -1;  // always north

        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;

        while (aCond & (b > (dy - 1))) {
            do Screen.drawPixel(x1 + a, y1 + b);

            // if current slope is bigger than target slope (go aStep direction)
            if (diff > 0) {
                let a = a + aStep;
                // diff is comparing the two slopes, b/a and dy/dx which has same value as
                // a * dy < b * dx or diff = (a * dy) - (b * dx)
                // that means that changing a or b would only increment/decrement diff by dy or dx
                // since we always draw going north, b and dy are always negative
                // a and dx can go either direction, so use two conditions
                let diff = diff + dy;
                if (aStep = 1) {
                    let aCond = a < (dx + 1);
                } else {
                    let aCond = a > (dx - 1);
                }
            } else {
                // otherwise go bStep direction
                let b = b + bStep;
                if (aStep = 1) {
                    let diff = diff + dx;
                } else { 
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int start, end;
        let start = y1;
        let end = y2 + 1;
        // Might be faster to draw vertical/horizontal lines depending on args
        while (start < end) {
            do Screen.drawLine(x1, start, x2, start);
            let start = start + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, x1, x2, yLine, yEnd, triLength, rSquared;
        // starting at the top (dy is 0 in the center, -r at top, r at bottom)
        let dy = -r;
        let yEnd = r + 1;
        let rSquared = r * r; // can calculate once and use in the loop
        
        while (dy < yEnd) {
            // series of draw line operations, but need to figure out length
            let yLine = y + dy;

            // from the center x and y, there are 2 right triangles 
            // going left and right from center x
            // triangles have edges of length r and dy. use pythagorean formula
            let triLength = Math.sqrt(rSquared - (dy * dy));
            let x1 = x - triLength;
            let x2 = x + triLength;
            do Screen.drawLine(x1, yLine, x2, yLine);

            let dy = dy + 1;
        }
        return;
    }
}
